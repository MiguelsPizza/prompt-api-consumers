/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../entrypoints/sidepanel/routes/__root'
import { Route as SessionsImport } from './../entrypoints/sidepanel/routes/sessions'
import { Route as ModelsImport } from './../entrypoints/sidepanel/routes/models'
import { Route as IndexImport } from './../entrypoints/sidepanel/routes/index'
import { Route as SessionsListImport } from './../entrypoints/sidepanel/routes/sessions.list'
import { Route as SessionsSessionIdImport } from './../entrypoints/sidepanel/routes/sessions.$sessionId'
import { Route as ModelsModelIdImport } from './../entrypoints/sidepanel/routes/models.$modelId'

// Create/Update Routes

const SessionsRoute = SessionsImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => rootRoute,
} as any)

const ModelsRoute = ModelsImport.update({
  id: '/models',
  path: '/models',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SessionsListRoute = SessionsListImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => SessionsRoute,
} as any)

const SessionsSessionIdRoute = SessionsSessionIdImport.update({
  id: '/$sessionId',
  path: '/$sessionId',
  getParentRoute: () => SessionsRoute,
} as any)

const ModelsModelIdRoute = ModelsModelIdImport.update({
  id: '/$modelId',
  path: '/$modelId',
  getParentRoute: () => ModelsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/models': {
      id: '/models'
      path: '/models'
      fullPath: '/models'
      preLoaderRoute: typeof ModelsImport
      parentRoute: typeof rootRoute
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsImport
      parentRoute: typeof rootRoute
    }
    '/models/$modelId': {
      id: '/models/$modelId'
      path: '/$modelId'
      fullPath: '/models/$modelId'
      preLoaderRoute: typeof ModelsModelIdImport
      parentRoute: typeof ModelsImport
    }
    '/sessions/$sessionId': {
      id: '/sessions/$sessionId'
      path: '/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof SessionsSessionIdImport
      parentRoute: typeof SessionsImport
    }
    '/sessions/list': {
      id: '/sessions/list'
      path: '/list'
      fullPath: '/sessions/list'
      preLoaderRoute: typeof SessionsListImport
      parentRoute: typeof SessionsImport
    }
  }
}

// Create and export the route tree

interface ModelsRouteChildren {
  ModelsModelIdRoute: typeof ModelsModelIdRoute
}

const ModelsRouteChildren: ModelsRouteChildren = {
  ModelsModelIdRoute: ModelsModelIdRoute,
}

const ModelsRouteWithChildren =
  ModelsRoute._addFileChildren(ModelsRouteChildren)

interface SessionsRouteChildren {
  SessionsSessionIdRoute: typeof SessionsSessionIdRoute
  SessionsListRoute: typeof SessionsListRoute
}

const SessionsRouteChildren: SessionsRouteChildren = {
  SessionsSessionIdRoute: SessionsSessionIdRoute,
  SessionsListRoute: SessionsListRoute,
}

const SessionsRouteWithChildren = SessionsRoute._addFileChildren(
  SessionsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/models': typeof ModelsRouteWithChildren
  '/sessions': typeof SessionsRouteWithChildren
  '/models/$modelId': typeof ModelsModelIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/sessions/list': typeof SessionsListRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/models': typeof ModelsRouteWithChildren
  '/sessions': typeof SessionsRouteWithChildren
  '/models/$modelId': typeof ModelsModelIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/sessions/list': typeof SessionsListRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/models': typeof ModelsRouteWithChildren
  '/sessions': typeof SessionsRouteWithChildren
  '/models/$modelId': typeof ModelsModelIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/sessions/list': typeof SessionsListRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/models'
    | '/sessions'
    | '/models/$modelId'
    | '/sessions/$sessionId'
    | '/sessions/list'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/models'
    | '/sessions'
    | '/models/$modelId'
    | '/sessions/$sessionId'
    | '/sessions/list'
  id:
    | '__root__'
    | '/'
    | '/models'
    | '/sessions'
    | '/models/$modelId'
    | '/sessions/$sessionId'
    | '/sessions/list'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ModelsRoute: typeof ModelsRouteWithChildren
  SessionsRoute: typeof SessionsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ModelsRoute: ModelsRouteWithChildren,
  SessionsRoute: SessionsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/models",
        "/sessions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/models": {
      "filePath": "models.tsx",
      "children": [
        "/models/$modelId"
      ]
    },
    "/sessions": {
      "filePath": "sessions.tsx",
      "children": [
        "/sessions/$sessionId",
        "/sessions/list"
      ]
    },
    "/models/$modelId": {
      "filePath": "models.$modelId.tsx",
      "parent": "/models"
    },
    "/sessions/$sessionId": {
      "filePath": "sessions.$sessionId.tsx",
      "parent": "/sessions"
    },
    "/sessions/list": {
      "filePath": "sessions.list.tsx",
      "parent": "/sessions"
    }
  }
}
ROUTE_MANIFEST_END */
