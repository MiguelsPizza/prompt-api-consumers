{"version":3,"file":"WASQLiteDB.worker-B8dbDqHc.js","sources":["../../node_modules/.pnpm/@journeyapps+wa-sqlite@1.0.0/node_modules/@journeyapps/wa-sqlite/src/sqlite-constants.js","../../node_modules/.pnpm/@journeyapps+wa-sqlite@1.0.0/node_modules/@journeyapps/wa-sqlite/src/sqlite-api.js","../../node_modules/.pnpm/comlink@4.4.2/node_modules/comlink/dist/esm/comlink.mjs","../../node_modules/.pnpm/async-mutex@0.4.1/node_modules/async-mutex/index.mjs","../../node_modules/.pnpm/@powersync+web@1.10.0_@journeyapps+wa-sqlite@1.0.0_@powersync+common@1.21.0/node_modules/@powersync/web/lib/src/shared/open-db.js","../../node_modules/.pnpm/@powersync+web@1.10.0_@journeyapps+wa-sqlite@1.0.0_@powersync+common@1.21.0/node_modules/@powersync/web/lib/src/worker/db/WASQLiteDB.worker.js"],"sourcesContent":["// Primary result codes.\n// https://www.sqlite.org/rescode.html\nexport const SQLITE_OK = 0;\nexport const SQLITE_ERROR = 1;\nexport const SQLITE_INTERNAL = 2;\nexport const SQLITE_PERM = 3;\nexport const SQLITE_ABORT = 4;\nexport const SQLITE_BUSY = 5;\nexport const SQLITE_LOCKED = 6;\nexport const SQLITE_NOMEM = 7;\nexport const SQLITE_READONLY = 8;\nexport const SQLITE_INTERRUPT = 9;\nexport const SQLITE_IOERR = 10;\nexport const SQLITE_CORRUPT = 11;\nexport const SQLITE_NOTFOUND = 12;\nexport const SQLITE_FULL = 13;\nexport const SQLITE_CANTOPEN = 14;\nexport const SQLITE_PROTOCOL = 15;\nexport const SQLITE_EMPTY = 16;\nexport const SQLITE_SCHEMA = 17;\nexport const SQLITE_TOOBIG = 18;\nexport const SQLITE_CONSTRAINT = 19;\nexport const SQLITE_MISMATCH = 20;\nexport const SQLITE_MISUSE = 21;\nexport const SQLITE_NOLFS = 22;\nexport const SQLITE_AUTH = 23;\nexport const SQLITE_FORMAT = 24;\nexport const SQLITE_RANGE = 25;\nexport const SQLITE_NOTADB = 26;\nexport const SQLITE_NOTICE = 27;\nexport const SQLITE_WARNING = 28;\nexport const SQLITE_ROW = 100;\nexport const SQLITE_DONE = 101;\n\n// Extended error codes.\nexport const SQLITE_IOERR_ACCESS = 3338;\nexport const SQLITE_IOERR_CHECKRESERVEDLOCK = 3594;\nexport const SQLITE_IOERR_CLOSE = 4106;\nexport const SQLITE_IOERR_DATA = 8202;\nexport const SQLITE_IOERR_DELETE = 2570;\nexport const SQLITE_IOERR_DELETE_NOENT = 5898;\nexport const SQLITE_IOERR_DIR_FSYNC = 1290;\nexport const SQLITE_IOERR_FSTAT = 1802;\nexport const SQLITE_IOERR_FSYNC = 1034;\nexport const SQLITE_IOERR_GETTEMPPATH = 6410;\nexport const SQLITE_IOERR_LOCK = 3850;\nexport const SQLITE_IOERR_NOMEM = 3082;\nexport const SQLITE_IOERR_READ = 266;\nexport const SQLITE_IOERR_RDLOCK = 2314;\nexport const SQLITE_IOERR_SEEK = 5642;\nexport const SQLITE_IOERR_SHORT_READ = 522;\nexport const SQLITE_IOERR_TRUNCATE = 1546;\nexport const SQLITE_IOERR_UNLOCK = 2058;\nexport const SQLITE_IOERR_VNODE = 6922;\nexport const SQLITE_IOERR_WRITE = 778;\nexport const SQLITE_IOERR_BEGIN_ATOMIC = 7434;\nexport const SQLITE_IOERR_COMMIT_ATOMIC = 7690;\nexport const SQLITE_IOERR_ROLLBACK_ATOMIC = 7946;\n\n// Other extended result codes.\nexport const SQLITE_CONSTRAINT_CHECK = 275;\nexport const SQLITE_CONSTRAINT_COMMITHOOK = 531;\nexport const SQLITE_CONSTRAINT_FOREIGNKEY = 787;\nexport const SQLITE_CONSTRAINT_FUNCTION = 1043;\nexport const SQLITE_CONSTRAINT_NOTNULL = 1299;\nexport const SQLITE_CONSTRAINT_PINNED = 2835;\nexport const SQLITE_CONSTRAINT_PRIMARYKEY = 1555;\nexport const SQLITE_CONSTRAINT_ROWID = 2579;\nexport const SQLITE_CONSTRAINT_TRIGGER = 1811;\nexport const SQLITE_CONSTRAINT_UNIQUE = 2067;\nexport const SQLITE_CONSTRAINT_VTAB = 2323;\n\n// Open flags.\n// https://www.sqlite.org/c3ref/c_open_autoproxy.html\nexport const SQLITE_OPEN_READONLY = 0x00000001;\nexport const SQLITE_OPEN_READWRITE = 0x00000002;\nexport const SQLITE_OPEN_CREATE = 0x00000004;\nexport const SQLITE_OPEN_DELETEONCLOSE = 0x00000008;\nexport const SQLITE_OPEN_EXCLUSIVE = 0x00000010;\nexport const SQLITE_OPEN_AUTOPROXY = 0x00000020;\nexport const SQLITE_OPEN_URI = 0x00000040;\nexport const SQLITE_OPEN_MEMORY = 0x00000080;\nexport const SQLITE_OPEN_MAIN_DB = 0x00000100;\nexport const SQLITE_OPEN_TEMP_DB = 0x00000200;\nexport const SQLITE_OPEN_TRANSIENT_DB = 0x00000400;\nexport const SQLITE_OPEN_MAIN_JOURNAL = 0x00000800;\nexport const SQLITE_OPEN_TEMP_JOURNAL = 0x00001000;\nexport const SQLITE_OPEN_SUBJOURNAL = 0x00002000;\nexport const SQLITE_OPEN_SUPER_JOURNAL = 0x00004000;\nexport const SQLITE_OPEN_NOMUTEX = 0x00008000;\nexport const SQLITE_OPEN_FULLMUTEX = 0x00010000;\nexport const SQLITE_OPEN_SHAREDCACHE = 0x00020000;\nexport const SQLITE_OPEN_PRIVATECACHE = 0x00040000;\nexport const SQLITE_OPEN_WAL = 0x00080000;\nexport const SQLITE_OPEN_NOFOLLOW = 0x01000000;\n\n// Locking levels.\n// https://www.sqlite.org/c3ref/c_lock_exclusive.html\nexport const SQLITE_LOCK_NONE = 0;\nexport const SQLITE_LOCK_SHARED = 1;\nexport const SQLITE_LOCK_RESERVED = 2;\nexport const SQLITE_LOCK_PENDING = 3;\nexport const SQLITE_LOCK_EXCLUSIVE = 4;\n\n// Device characteristics.\n// https://www.sqlite.org/c3ref/c_iocap_atomic.html\nexport const SQLITE_IOCAP_ATOMIC = 0x00000001;\nexport const SQLITE_IOCAP_ATOMIC512 = 0x00000002;\nexport const SQLITE_IOCAP_ATOMIC1K = 0x00000004;\nexport const SQLITE_IOCAP_ATOMIC2K = 0x00000008;\nexport const SQLITE_IOCAP_ATOMIC4K = 0x00000010;\nexport const SQLITE_IOCAP_ATOMIC8K = 0x00000020;\nexport const SQLITE_IOCAP_ATOMIC16K = 0x00000040;\nexport const SQLITE_IOCAP_ATOMIC32K = 0x00000080;\nexport const SQLITE_IOCAP_ATOMIC64K = 0x00000100;\nexport const SQLITE_IOCAP_SAFE_APPEND = 0x00000200;\nexport const SQLITE_IOCAP_SEQUENTIAL = 0x00000400;\nexport const SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN = 0x00000800;\nexport const SQLITE_IOCAP_POWERSAFE_OVERWRITE = 0x00001000;\nexport const SQLITE_IOCAP_IMMUTABLE = 0x00002000;\nexport const SQLITE_IOCAP_BATCH_ATOMIC = 0x00004000;\n\n// xAccess flags.\n// https://www.sqlite.org/c3ref/c_access_exists.html\nexport const SQLITE_ACCESS_EXISTS = 0;\nexport const SQLITE_ACCESS_READWRITE = 1;\nexport const SQLITE_ACCESS_READ = 2;\n\n// File control opcodes\n// https://www.sqlite.org/c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlbeginatomicwrite\nexport const SQLITE_FCNTL_LOCKSTATE = 1; \nexport const SQLITE_FCNTL_GET_LOCKPROXYFILE = 2; \nexport const SQLITE_FCNTL_SET_LOCKPROXYFILE = 3; \nexport const SQLITE_FCNTL_LAST_ERRNO = 4; \nexport const SQLITE_FCNTL_SIZE_HINT = 5; \nexport const SQLITE_FCNTL_CHUNK_SIZE = 6; \nexport const SQLITE_FCNTL_FILE_POINTER = 7; \nexport const SQLITE_FCNTL_SYNC_OMITTED = 8; \nexport const SQLITE_FCNTL_WIN32_AV_RETRY = 9; \nexport const SQLITE_FCNTL_PERSIST_WAL = 10; \nexport const SQLITE_FCNTL_OVERWRITE = 11; \nexport const SQLITE_FCNTL_VFSNAME = 12; \nexport const SQLITE_FCNTL_POWERSAFE_OVERWRITE = 13; \nexport const SQLITE_FCNTL_PRAGMA = 14; \nexport const SQLITE_FCNTL_BUSYHANDLER = 15; \nexport const SQLITE_FCNTL_TEMPFILENAME = 16; \nexport const SQLITE_FCNTL_MMAP_SIZE = 18; \nexport const SQLITE_FCNTL_TRACE = 19; \nexport const SQLITE_FCNTL_HAS_MOVED = 20; \nexport const SQLITE_FCNTL_SYNC = 21; \nexport const SQLITE_FCNTL_COMMIT_PHASETWO = 22; \nexport const SQLITE_FCNTL_WIN32_SET_HANDLE = 23; \nexport const SQLITE_FCNTL_WAL_BLOCK = 24; \nexport const SQLITE_FCNTL_ZIPVFS = 25; \nexport const SQLITE_FCNTL_RBU = 26; \nexport const SQLITE_FCNTL_VFS_POINTER = 27; \nexport const SQLITE_FCNTL_JOURNAL_POINTER = 28; \nexport const SQLITE_FCNTL_WIN32_GET_HANDLE = 29; \nexport const SQLITE_FCNTL_PDB = 30; \nexport const SQLITE_FCNTL_BEGIN_ATOMIC_WRITE = 31; \nexport const SQLITE_FCNTL_COMMIT_ATOMIC_WRITE = 32; \nexport const SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE = 33; \nexport const SQLITE_FCNTL_LOCK_TIMEOUT = 34; \nexport const SQLITE_FCNTL_DATA_VERSION = 35; \nexport const SQLITE_FCNTL_SIZE_LIMIT = 36; \nexport const SQLITE_FCNTL_CKPT_DONE = 37; \nexport const SQLITE_FCNTL_RESERVE_BYTES = 38; \nexport const SQLITE_FCNTL_CKPT_START = 39;\n\n// Fundamental datatypes.\n// https://www.sqlite.org/c3ref/c_blob.html\nexport const SQLITE_INTEGER = 1;\nexport const SQLITE_FLOAT = 2;\nexport const SQLITE_TEXT = 3;\nexport const SQLITE_BLOB = 4;\nexport const SQLITE_NULL = 5;\n\n// Special destructor behavior.\n// https://www.sqlite.org/c3ref/c_static.html\nexport const SQLITE_STATIC = 0;\nexport const SQLITE_TRANSIENT = -1;\n\n// Text encodings.\n// https://sqlite.org/c3ref/c_any.html\nexport const SQLITE_UTF8 = 1;     /* IMP: R-37514-35566 */\nexport const SQLITE_UTF16LE = 2;  /* IMP: R-03371-37637 */\nexport const SQLITE_UTF16BE = 3;  /* IMP: R-51971-34154 */\nexport const SQLITE_UTF16 = 4;    /* Use native byte order */\n\n// Module constraint ops.\nexport const SQLITE_INDEX_CONSTRAINT_EQ        = 2;\nexport const SQLITE_INDEX_CONSTRAINT_GT        = 4;\nexport const SQLITE_INDEX_CONSTRAINT_LE        = 8;\nexport const SQLITE_INDEX_CONSTRAINT_LT        = 16;\nexport const SQLITE_INDEX_CONSTRAINT_GE        = 32;\nexport const SQLITE_INDEX_CONSTRAINT_MATCH     = 64;\nexport const SQLITE_INDEX_CONSTRAINT_LIKE      = 65;\nexport const SQLITE_INDEX_CONSTRAINT_GLOB      = 66;\nexport const SQLITE_INDEX_CONSTRAINT_REGEXP    = 67;\nexport const SQLITE_INDEX_CONSTRAINT_NE        = 68;\nexport const SQLITE_INDEX_CONSTRAINT_ISNOT     = 69;\nexport const SQLITE_INDEX_CONSTRAINT_ISNOTNULL = 70;\nexport const SQLITE_INDEX_CONSTRAINT_ISNULL    = 71;\nexport const SQLITE_INDEX_CONSTRAINT_IS        = 72;\nexport const SQLITE_INDEX_CONSTRAINT_FUNCTION  = 150;\nexport const SQLITE_INDEX_SCAN_UNIQUE          = 1;  /* Scan visits at most = 1 row */\n\n// Function flags\nexport const SQLITE_DETERMINISTIC = 0x000000800;\nexport const SQLITE_DIRECTONLY    = 0x000080000;\nexport const SQLITE_SUBTYPE       = 0x000100000;\nexport const SQLITE_INNOCUOUS     = 0x000200000;\n\n// Sync flags\nexport const SQLITE_SYNC_NORMAL   = 0x00002;\nexport const SQLITE_SYNC_FULL     = 0x00003;\nexport const SQLITE_SYNC_DATAONLY = 0x00010;\n\n// Authorizer action codes\nexport const SQLITE_CREATE_INDEX        = 1;\nexport const SQLITE_CREATE_TABLE        = 2;\nexport const SQLITE_CREATE_TEMP_INDEX   = 3;\nexport const SQLITE_CREATE_TEMP_TABLE   = 4;\nexport const SQLITE_CREATE_TEMP_TRIGGER = 5;\nexport const SQLITE_CREATE_TEMP_VIEW    = 6;\nexport const SQLITE_CREATE_TRIGGER      = 7;\nexport const SQLITE_CREATE_VIEW         = 8;\nexport const SQLITE_DELETE              = 9;\nexport const SQLITE_DROP_INDEX          = 10;\nexport const SQLITE_DROP_TABLE          = 11;\nexport const SQLITE_DROP_TEMP_INDEX     = 12;\nexport const SQLITE_DROP_TEMP_TABLE     = 13;\nexport const SQLITE_DROP_TEMP_TRIGGER   = 14;\nexport const SQLITE_DROP_TEMP_VIEW      = 15;\nexport const SQLITE_DROP_TRIGGER        = 16;\nexport const SQLITE_DROP_VIEW           = 17;\nexport const SQLITE_INSERT              = 18;\nexport const SQLITE_PRAGMA              = 19;\nexport const SQLITE_READ                = 20;\nexport const SQLITE_SELECT              = 21;\nexport const SQLITE_TRANSACTION         = 22;\nexport const SQLITE_UPDATE              = 23;\nexport const SQLITE_ATTACH              = 24;\nexport const SQLITE_DETACH              = 25;\nexport const SQLITE_ALTER_TABLE         = 26;\nexport const SQLITE_REINDEX             = 27;\nexport const SQLITE_ANALYZE             = 28;\nexport const SQLITE_CREATE_VTABLE       = 29;\nexport const SQLITE_DROP_VTABLE         = 30;\nexport const SQLITE_FUNCTION            = 31;\nexport const SQLITE_SAVEPOINT           = 32;\nexport const SQLITE_COPY                = 0;\nexport const SQLITE_RECURSIVE           = 33;\n\n// Authorizer return codes\nexport const SQLITE_DENY   = 1;\nexport const SQLITE_IGNORE = 2;\n\n// Limit categories\nexport const SQLITE_LIMIT_LENGTH              = 0;\nexport const SQLITE_LIMIT_SQL_LENGTH          = 1;\nexport const SQLITE_LIMIT_COLUMN              = 2;\nexport const SQLITE_LIMIT_EXPR_DEPTH          = 3;\nexport const SQLITE_LIMIT_COMPOUND_SELECT     = 4;\nexport const SQLITE_LIMIT_VDBE_OP             = 5;\nexport const SQLITE_LIMIT_FUNCTION_ARG        = 6;\nexport const SQLITE_LIMIT_ATTACHED            = 7;\nexport const SQLITE_LIMIT_LIKE_PATTERN_LENGTH = 8;\nexport const SQLITE_LIMIT_VARIABLE_NUMBER     = 9;\nexport const SQLITE_LIMIT_TRIGGER_DEPTH       = 10;\nexport const SQLITE_LIMIT_WORKER_THREADS      = 11;\n\nexport const SQLITE_PREPARE_PERSISTENT = 0x01;\nexport const SQLITE_PREPARE_NORMALIZED = 0x02;\nexport const SQLITE_PREPARE_NO_VTAB = 0x04;","// Copyright 2021 Roy T. Hashimoto. All Rights Reserved.\n\nimport * as SQLite from './sqlite-constants.js';\nexport * from './sqlite-constants.js';\n\n/**\n * Need to have a serializer for bigint\n * https://github.com/GoogleChromeLabs/jsbi/issues/30\n */\nif (typeof BigInt.prototype['toJSON'] == 'undefined') {\n  BigInt.prototype['toJSON'] = function() {\n    return this.toString();\n  };\n}\n\nconst MAX_INT64 = 0x7fffffffffffffffn;\nconst MIN_INT64 = -0x8000000000000000n;\n\nconst AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\nexport class SQLiteError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n}\n\nconst async = true;\n\n\n/**\n * Builds a Javascript API from the Emscripten module. This API is still\n * low-level and closely corresponds to the C API exported by the module,\n * but differs in some specifics like throwing exceptions on errors.\n * @param {*} Module SQLite Emscripten module\n * @returns {SQLiteAPI}\n */\nexport function Factory(Module) {\n  /** @type {SQLiteAPI} */ const sqlite3 = {};\n\n  Module.retryOps = [];\n  const sqliteFreeAddress = Module._getSqliteFree();\n\n  // Allocate some space for 32-bit returned values.\n  const tmp = Module._malloc(8);\n  const tmpPtr = [tmp, tmp + 4];\n\n  // Convert a JS string to a C string. sqlite3_malloc is used to allocate\n  // memory (use sqlite3_free to deallocate).\n  function createUTF8(s) {\n    if (typeof s !== 'string') return 0;\n    const utf8 = new TextEncoder().encode(s);\n    const zts = Module._sqlite3_malloc(utf8.byteLength + 1);\n    Module.HEAPU8.set(utf8, zts);\n    Module.HEAPU8[zts + utf8.byteLength] = 0;\n    return zts;\n  }\n\n  /**\n   * Concatenate 32-bit numbers into a 64-bit (signed) BigInt.\n   * @param {number} lo32\n   * @param {number} hi32\n   * @returns {bigint}\n   */\n  function cvt32x2ToBigInt(lo32, hi32) {\n    return (BigInt(hi32) << 32n) | (BigInt(lo32) & 0xffffffffn);\n  }\n\n  // /**\n  //  * Setup table change update callback\n  //  */\n  // var onTableChangedFunctionPointer = Module.addFunction(onTableUpdate);\n  // var passFnPointer = Module.cwrap('passFnPointer', 'undefined', ['number']);\n  // passFnPointer(onTableChangedFunctionPointer);\n  /**\n   * Concatenate 32-bit numbers and return as number or BigInt, depending\n   * on the value.\n   * @param {number} lo32\n   * @param {number} hi32\n   * @returns {number|bigint}\n   */\n  const cvt32x2AsSafe = (function() {\n    const hiMax = BigInt(Number.MAX_SAFE_INTEGER) >> 32n;\n    const hiMin = BigInt(Number.MIN_SAFE_INTEGER) >> 32n;\n\n    return function(lo32, hi32) {\n      if (hi32 > hiMax || hi32 < hiMin) {\n        // Can't be expressed as a Number so use BigInt.\n        return cvt32x2ToBigInt(lo32, hi32);\n      } else {\n        // Combine the upper and lower 32-bit numbers. The complication is\n        // that lo32 is a signed integer which makes manipulating its bits\n        // a little tricky - the sign bit gets handled separately.\n        return hi32 * 0x100000000 + (lo32 & 0x7fffffff) - (lo32 & 0x80000000);\n      }\n    };\n  })();\n\n  const databases = new Set();\n  function verifyDatabase(db) {\n    if (!databases.has(db)) {\n      throw new SQLiteError('not a database', SQLite.SQLITE_MISUSE);\n    }\n  }\n\n  const mapStmtToDB = new Map();\n  function verifyStatement(stmt) {\n    if (!mapStmtToDB.has(stmt)) {\n      throw new SQLiteError('not a statement', SQLite.SQLITE_MISUSE);\n    }\n  }\n\n  sqlite3.bind_collection = function(stmt, bindings) {\n    verifyStatement(stmt);\n    const isArray = Array.isArray(bindings);\n    const nBindings = sqlite3.bind_parameter_count(stmt);\n    for (let i = 1; i <= nBindings; ++i) {\n      const key = isArray ? i - 1 : sqlite3.bind_parameter_name(stmt, i);\n      const value = bindings[key];\n      if (value !== undefined) {\n        sqlite3.bind(stmt, i, value);\n      }\n    }\n    return SQLite.SQLITE_OK;\n  };\n\n  sqlite3.bind = function(stmt, i, value) {\n    verifyStatement(stmt);\n    switch (typeof value) {\n      case 'number':\n        if (value === (value | 0)) {\n          return sqlite3.bind_int(stmt, i, value);\n        } else {\n          return sqlite3.bind_double(stmt, i, value);\n        }\n      case 'string':\n        return sqlite3.bind_text(stmt, i, value);\n      default:\n        if (value instanceof Uint8Array || Array.isArray(value)) {\n          return sqlite3.bind_blob(stmt, i, value);\n        } else if (value === null) {\n          return sqlite3.bind_null(stmt, i);\n        } else if (typeof value === 'bigint') {\n          return sqlite3.bind_int64(stmt, i, value);\n        } else if (value === undefined) {\n          // Existing binding (or NULL) will be used.\n          return SQLite.SQLITE_NOTICE;\n        } else {\n          console.warn('unknown binding converted to null', value);\n          return sqlite3.bind_null(stmt, i);\n        }\n    }\n  };\n\n  sqlite3.bind_blob = (function() {\n    const fname = 'sqlite3_bind_blob';\n    const f = Module.cwrap(fname, ...decl('nnnnn:n'));\n    return function(stmt, i, value) {\n      verifyStatement(stmt);\n      // @ts-ignore\n      const byteLength = value.byteLength ?? value.length;\n      const ptr = Module._sqlite3_malloc(byteLength);\n      Module.HEAPU8.subarray(ptr).set(value);\n      const result = f(stmt, i, ptr, byteLength, sqliteFreeAddress);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.bind_parameter_count = (function() {\n    const fname = 'sqlite3_bind_parameter_count';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(stmt) {\n      verifyStatement(stmt);\n      const result = f(stmt);\n      return result;\n    };\n  })();\n\n  sqlite3.bind_double = (function() {\n    const fname = 'sqlite3_bind_double';\n    const f = Module.cwrap(fname, ...decl('nnn:n'));\n    return function(stmt, i, value) {\n      verifyStatement(stmt);\n      const result = f(stmt, i, value);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.bind_int = (function() {\n    const fname = 'sqlite3_bind_int';\n    const f = Module.cwrap(fname, ...decl('nnn:n'));\n    return function(stmt, i, value) {\n      verifyStatement(stmt);\n      if (value > 0x7fffffff || value < -0x80000000) return SQLite.SQLITE_RANGE;\n\n      const result = f(stmt, i, value);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.bind_int64 = (function() {\n    const fname = 'sqlite3_bind_int64';\n    const f = Module.cwrap(fname, ...decl('nnnn:n'));\n    return function(stmt, i, value) {\n      verifyStatement(stmt);\n      if (value > MAX_INT64 || value < MIN_INT64) return SQLite.SQLITE_RANGE;\n\n      const lo32 = value & 0xffffffffn;\n      const hi32 = value >> 32n;\n      const result = f(stmt, i, Number(lo32), Number(hi32));\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.bind_null = (function() {\n    const fname = 'sqlite3_bind_null';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, i) {\n      verifyStatement(stmt);\n      const result = f(stmt, i);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.bind_parameter_name = (function() {\n    const fname = 'sqlite3_bind_parameter_name';\n    const f = Module.cwrap(fname, ...decl('n:s'));\n    return function(stmt, i) {\n      verifyStatement(stmt);\n      const result = f(stmt, i);\n      return result;\n    };\n  })();\n\n  sqlite3.bind_text = (function() {\n    const fname = 'sqlite3_bind_text';\n    const f = Module.cwrap(fname, ...decl('nnnnn:n'));\n    return function(stmt, i, value) {\n      verifyStatement(stmt);\n      const ptr = createUTF8(value);\n      const result = f(stmt, i, ptr, -1, sqliteFreeAddress);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.changes = (function() {\n    const fname = 'sqlite3_changes';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(db) {\n      verifyDatabase(db);\n      const result = f(db);\n      return result;\n    };\n  })();\n\n  sqlite3.clear_bindings = (function() {\n    const fname = 'sqlite3_clear_bindings';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(stmt) {\n      verifyStatement(stmt);\n      const result = f(stmt);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.last_insert_id = (function() {\n    const fname = 'sqlite3_last_insert_rowid';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(db) {\n      verifyDatabase(db);\n      const result = f(db);\n      // trace(fname, result);\n      return result;\n    };\n  })();\n  \n  sqlite3.close = (function() {\n    const fname = 'sqlite3_close';\n    const f = Module.cwrap(fname, ...decl('n:n'), { async });\n    return async function(db) {\n      verifyDatabase(db);\n      const result = await f(db);\n      databases.delete(db);\n      return check(fname, result, db);\n    };\n  })();\n\n  sqlite3.column = function(stmt, iCol) {\n    verifyStatement(stmt);\n    const type = sqlite3.column_type(stmt, iCol);\n    switch (type) {\n      case SQLite.SQLITE_BLOB:\n        return sqlite3.column_blob(stmt, iCol);\n      case SQLite.SQLITE_FLOAT:\n        return sqlite3.column_double(stmt, iCol);\n      case SQLite.SQLITE_INTEGER:\n        const lo32 = sqlite3.column_int(stmt, iCol);\n        const hi32 = Module.getTempRet0();\n        return cvt32x2AsSafe(lo32, hi32);\n      case SQLite.SQLITE_NULL:\n        return null;\n      case SQLite.SQLITE_TEXT:\n        return sqlite3.column_text(stmt, iCol);\n      default:\n        throw new SQLiteError('unknown type', type);\n    }\n  };\n\n  sqlite3.column_blob = (function() {\n    const fname = 'sqlite3_column_blob';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const nBytes = sqlite3.column_bytes(stmt, iCol);\n      const address = f(stmt, iCol);\n      const result = Module.HEAPU8.subarray(address, address + nBytes);\n      return result;\n    };\n  })();\n\n  sqlite3.column_bytes = (function() {\n    const fname = 'sqlite3_column_bytes';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const result = f(stmt, iCol);\n      return result;\n    };\n  })();\n\n  sqlite3.column_count = (function() {\n    const fname = 'sqlite3_column_count';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(stmt) {\n      verifyStatement(stmt);\n      const result = f(stmt);\n      return result;\n    };\n  })();\n\n  sqlite3.column_double = (function() {\n    const fname = 'sqlite3_column_double';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const result = f(stmt, iCol);\n      return result;\n    };\n  })();\n\n  sqlite3.column_int = (function() {\n    // Retrieve int64 but use only the lower 32 bits. The upper 32-bits are\n    // accessible with Module.getTempRet0().\n    const fname = 'sqlite3_column_int64';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const result = f(stmt, iCol);\n      return result;\n    };\n  })();\n\n  sqlite3.column_int64 = (function() {\n    const fname = 'sqlite3_column_int64';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const lo32 = f(stmt, iCol);\n      const hi32 = Module.getTempRet0();\n      const result = cvt32x2ToBigInt(lo32, hi32);\n      return result;\n    };\n  })();\n\n  sqlite3.column_name = (function() {\n    const fname = 'sqlite3_column_name';\n    const f = Module.cwrap(fname, ...decl('nn:s'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const result = f(stmt, iCol);\n      return result;\n    };\n  })();\n\n  sqlite3.column_names = function(stmt) {\n    const columns = [];\n    const nColumns = sqlite3.column_count(stmt);\n    for (let i = 0; i < nColumns; ++i) {\n      columns.push(sqlite3.column_name(stmt, i));\n    }\n    return columns;\n  };\n\n  sqlite3.column_text = (function() {\n    const fname = 'sqlite3_column_text';\n    const f = Module.cwrap(fname, ...decl('nn:s'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const result = f(stmt, iCol);\n      return result;\n    };\n  })();\n\n  sqlite3.column_type = (function() {\n    const fname = 'sqlite3_column_type';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(stmt, iCol) {\n      verifyStatement(stmt);\n      const result = f(stmt, iCol);\n      return result;\n    };\n  })();\n\n  sqlite3.create_function = function(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal) {\n    verifyDatabase(db);\n    \n    // Convert SQLite callback arguments to JavaScript-friendly arguments.\n    function adapt(f) {\n      return f instanceof AsyncFunction ?\n        (async (ctx, n, values) => f(ctx, Module.HEAP32.subarray(values / 4, values / 4 + n))) :\n        ((ctx, n, values) => f(ctx, Module.HEAP32.subarray(values / 4, values / 4 + n)));\n    }\n\n    const result = Module.create_function(\n      db,\n      zFunctionName,\n      nArg,\n      eTextRep,\n      pApp,\n      xFunc && adapt(xFunc),\n      xStep && adapt(xStep),\n      xFinal);\n    return check('sqlite3_create_function', result, db);\n  };\n\n  sqlite3.data_count = (function() {\n    const fname = 'sqlite3_data_count';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(stmt) {\n      verifyStatement(stmt);\n      const result = f(stmt);\n      return result;\n    };\n  })();\n\n  sqlite3.exec = async function(db, sql, callback) {\n    for await (const stmt of sqlite3.statements(db, sql)) {\n      let columns;\n      while ((await sqlite3.step(stmt)) === SQLite.SQLITE_ROW) {\n        if (callback) {\n          columns = columns ?? sqlite3.column_names(stmt);\n          const row = sqlite3.row(stmt);\n          await callback(row, columns);\n        }\n      }\n    }\n    return SQLite.SQLITE_OK;\n  };\n\n  sqlite3.finalize = (function() {\n    const fname = 'sqlite3_finalize';\n    const f = Module.cwrap(fname, ...decl('n:n'), { async });\n    return async function(stmt) {\n      const result = await f(stmt);\n      mapStmtToDB.delete(stmt)\n\n      // Don't throw on error here. Typically the error has already been\n      // thrown and finalize() is part of the cleanup.\n      return result;\n    };\n  })();\n\n  sqlite3.get_autocommit = (function() {\n    const fname = 'sqlite3_get_autocommit';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(db) {\n      const result = f(db);\n      return result;\n    };\n  })();\n\n  sqlite3.libversion = (function() {\n    const fname = 'sqlite3_libversion';\n    const f = Module.cwrap(fname, ...decl(':s'));\n    return function() {\n      const result = f();\n      return result;\n    };\n  })();\n\n  sqlite3.libversion_number = (function() {\n    const fname = 'sqlite3_libversion_number';\n    const f = Module.cwrap(fname, ...decl(':n'));\n    return function() {\n      const result = f();\n      return result;\n    };\n  })();\n\n  sqlite3.limit = (function() {\n    const fname = 'sqlite3_limit';\n    const f = Module.cwrap(fname, ...decl('nnn:n'));\n    return function(db, id, newVal) {\n      const result = f(db, id, newVal);\n      return result;\n    };\n  })();\n\n  sqlite3.open_v2 = (function() {\n    const fname = 'sqlite3_open_v2';\n    const f = Module.cwrap(fname, ...decl('snnn:n'), { async });\n    return async function(zFilename, flags, zVfs) {\n      flags = flags || SQLite.SQLITE_OPEN_CREATE | SQLite.SQLITE_OPEN_READWRITE;\n      zVfs = createUTF8(zVfs);\n      try {\n        // Allow retry operations.\n        const rc = await retry(() => f(zFilename, tmpPtr[0], flags, zVfs));\n\n        const db = Module.getValue(tmpPtr[0], '*');\n        databases.add(db);\n\n        Module.ccall('RegisterExtensionFunctions', 'number', ['number'], [db]);\n        check(fname, rc);\n        return db;\n      } finally {\n        Module._sqlite3_free(zVfs);\n      }\n    };\n  })();\n\n  sqlite3.progress_handler = function(db, nProgressOps, handler, userData) {\n    verifyDatabase(db);\n    Module.progress_handler(db, nProgressOps, handler, userData);\n  };;\n\n  sqlite3.reset = (function() {\n    const fname = 'sqlite3_reset';\n    const f = Module.cwrap(fname, ...decl('n:n'), { async });\n    return async function(stmt) {\n      verifyStatement(stmt);\n      const result = await f(stmt);\n      return check(fname, result, mapStmtToDB.get(stmt));\n    };\n  })();\n\n  sqlite3.result = function(context, value) {\n    switch (typeof value) {\n      case 'number':\n        if (value === (value | 0)) {\n          sqlite3.result_int(context, value);\n        } else {\n          sqlite3.result_double(context, value);\n        }\n        break;\n      case 'string':\n        sqlite3.result_text(context, value);\n        break;\n      default:\n        if (value instanceof Uint8Array || Array.isArray(value)) {\n          sqlite3.result_blob(context, value);\n        } else if (value === null) {\n          sqlite3.result_null(context);\n        } else if (typeof value === 'bigint') {\n          return sqlite3.result_int64(context, value);\n        } else {\n          console.warn('unknown result converted to null', value);\n          sqlite3.result_null(context);\n        }\n        break;\n    }\n  };\n\n  sqlite3.result_blob = (function() {\n    const fname = 'sqlite3_result_blob';\n    const f = Module.cwrap(fname, ...decl('nnnn:n'));\n    return function(context, value) {\n      // @ts-ignore\n      const byteLength = value.byteLength ?? value.length;\n      const ptr = Module._sqlite3_malloc(byteLength);\n      Module.HEAPU8.subarray(ptr).set(value);\n      f(context, ptr, byteLength, sqliteFreeAddress); // void return\n    };\n  })();\n\n  sqlite3.result_double = (function() {\n    const fname = 'sqlite3_result_double';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(context, value) {\n      f(context, value); // void return\n    };\n  })();\n\n  sqlite3.result_int = (function() {\n    const fname = 'sqlite3_result_int';\n    const f = Module.cwrap(fname, ...decl('nn:n'));\n    return function(context, value) {\n      f(context, value); // void return\n    };\n  })();\n\n  sqlite3.result_int64 = (function() {\n    const fname = 'sqlite3_result_int64';\n    const f = Module.cwrap(fname, ...decl('nnn:n'));\n    return function(context, value) {\n      if (value > MAX_INT64 || value < MIN_INT64) return SQLite.SQLITE_RANGE;\n\n      const lo32 = value & 0xffffffffn;\n      const hi32 = value >> 32n;\n      f(context, Number(lo32), Number(hi32)); // void return\n    };\n  })();\n\n  sqlite3.result_null = (function() {\n    const fname = 'sqlite3_result_null';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(context) {\n      f(context); // void return\n    };\n  })();\n\n  sqlite3.result_text = (function() {\n    const fname = 'sqlite3_result_text';\n    const f = Module.cwrap(fname, ...decl('nnnn:n'));\n    return function(context, value) {\n      const ptr = createUTF8(value);\n      f(context, ptr, -1, sqliteFreeAddress); // void return\n    };\n  })();\n\n  sqlite3.row = function(stmt) {\n    const row = [];\n    const nColumns = sqlite3.data_count(stmt);\n    for (let i = 0; i < nColumns; ++i) {\n      const value = sqlite3.column(stmt, i);\n\n      // Copy blob if aliasing volatile WebAssembly memory. This avoids an\n      // unnecessary copy if users monkey patch column_blob to copy.\n      // @ts-ignore\n      row.push(value?.buffer === Module.HEAPU8.buffer ? value.slice() : value);\n    }\n    return row;\n  };\n\n  sqlite3.set_authorizer = function(db, xAuth, pApp) {\n    verifyDatabase(db);\n\n    // Convert SQLite callback arguments to JavaScript-friendly arguments.\n    function cvtArgs(_, iAction, p3, p4, p5, p6) {\n      return [\n        _,\n        iAction,\n        Module.UTF8ToString(p3),\n        Module.UTF8ToString(p4),\n        Module.UTF8ToString(p5),\n        Module.UTF8ToString(p6)\n      ];\n    };\n    function adapt(f) {\n      return f instanceof AsyncFunction ?\n        (async (_, iAction, p3, p4, p5, p6) => f(...cvtArgs(_, iAction, p3, p4, p5, p6))) :\n        ((_, iAction, p3, p4, p5, p6) => f(...cvtArgs(_, iAction, p3, p4, p5, p6)));\n    }\n\n    const result = Module.set_authorizer(db, adapt(xAuth), pApp);\n    return check('sqlite3_set_authorizer', result, db);\n  };\n\n  sqlite3.sql = (function() {\n    const fname = 'sqlite3_sql';\n    const f = Module.cwrap(fname, ...decl('n:s'));\n    return function(stmt) {\n      verifyStatement(stmt);\n      const result = f(stmt);\n      return result;\n    };\n  })();\n\n  sqlite3.statements = function(db, sql, options = {}) {\n    const prepare = Module.cwrap(\n      'sqlite3_prepare_v3',\n      'number',\n      ['number', 'number', 'number', 'number', 'number', 'number'],\n      { async: true });\n\n    return (async function*() {\n      const onFinally = [];\n      try {\n        // Encode SQL string to UTF-8.\n        const utf8 = new TextEncoder().encode(sql);\n\n        // Copy encoded string to WebAssembly memory. The SQLite docs say\n        // zero-termination is a minor optimization so add room for that.\n        // Also add space for the statement handle and SQL tail pointer.\n        const allocSize = utf8.byteLength - (utf8.byteLength % 4) + 12;\n        const pzHead = Module._sqlite3_malloc(allocSize);\n        const pzEnd = pzHead + utf8.byteLength + 1;\n        onFinally.push(() => Module._sqlite3_free(pzHead));\n        Module.HEAPU8.set(utf8, pzHead);\n        Module.HEAPU8[pzEnd - 1] = 0;\n  \n        // Use extra space for the statement handle and SQL tail pointer.\n        const pStmt = pzHead + allocSize - 8;\n        const pzTail = pzHead + allocSize - 4;\n\n        // Ensure that statement handles are not leaked.\n        let stmt;\n        function maybeFinalize() {\n          if (stmt && !options.unscoped) {\n            sqlite3.finalize(stmt);\n          }\n          stmt = 0;\n        }\n        onFinally.push(maybeFinalize);\n        \n        // Loop over statements.\n        Module.setValue(pzTail, pzHead, '*');\n        do {\n          // Reclaim resources for the previous iteration.\n          maybeFinalize();\n\n          // Call sqlite3_prepare_v3() for the next statement.\n          // Allow retry operations.\n          const zTail = Module.getValue(pzTail, '*');\n          const rc = await retry(() => {\n            return prepare(\n              db,\n              zTail,\n              pzEnd - pzTail,\n              options.flags || 0,\n              pStmt,\n              pzTail);\n          });\n\n          if (rc !== SQLite.SQLITE_OK) {\n            check('sqlite3_prepare_v3', rc, db);\n          }\n          \n          stmt = Module.getValue(pStmt, '*');\n          if (stmt) {\n            mapStmtToDB.set(stmt, db);\n            yield stmt;\n          }\n        } while (stmt);\n      } finally {\n        while (onFinally.length) {\n          onFinally.pop()();\n        }\n      }\n    })();\n  };\n\n  sqlite3.step = (function() {\n    const fname = 'sqlite3_step';\n    const f = Module.cwrap(fname, ...decl('n:n'), { async });\n    return async function(stmt) {\n      verifyStatement(stmt);\n\n      // Allow retry operations.\n      const rc = await retry(() => f(stmt));\n\n      return check(fname, rc, mapStmtToDB.get(stmt), [SQLite.SQLITE_ROW, SQLite.SQLITE_DONE]);\n    };\n  })();\n\n  sqlite3.commit_hook = function(db, xCommitHook) {\n    verifyDatabase(db);\n    Module.commit_hook(db, xCommitHook);\n  };\n\n  sqlite3.update_hook = function(db, xUpdateHook) {\n    verifyDatabase(db);\n\n    // Convert SQLite callback arguments to JavaScript-friendly arguments.\n    function cvtArgs(iUpdateType, dbName, tblName, lo32, hi32) {\n      return [\n        iUpdateType,\n        Module.UTF8ToString(dbName),\n        Module.UTF8ToString(tblName),\n\t\tcvt32x2ToBigInt(lo32, hi32)\n      ];\n    };\n    function adapt(f) {\n      return f instanceof AsyncFunction ?\n        (async (iUpdateType, dbName, tblName, lo32, hi32) => f(...cvtArgs(iUpdateType, dbName, tblName, lo32, hi32))) :\n        ((iUpdateType, dbName, tblName, lo32, hi32) => f(...cvtArgs(iUpdateType, dbName, tblName, lo32, hi32)));\n    }\n\n    Module.update_hook(db, adapt(xUpdateHook));\n  };;\n\n  sqlite3.value = function(pValue) {\n    const type = sqlite3.value_type(pValue);\n    switch (type) {\n      case SQLite.SQLITE_BLOB:\n        return sqlite3.value_blob(pValue);\n      case SQLite.SQLITE_FLOAT:\n        return sqlite3.value_double(pValue);\n      case SQLite.SQLITE_INTEGER:\n        const lo32 = sqlite3.value_int(pValue);\n        const hi32 = Module.getTempRet0();\n        return cvt32x2AsSafe(lo32, hi32);\n      case SQLite.SQLITE_NULL:\n        return null;\n      case SQLite.SQLITE_TEXT:\n        return sqlite3.value_text(pValue);\n      default:\n        throw new SQLiteError('unknown type', type);\n    }\n  };\n\n  sqlite3.value_blob = (function() {\n    const fname = 'sqlite3_value_blob';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(pValue) {\n      const nBytes = sqlite3.value_bytes(pValue);\n      const address = f(pValue);\n      const result = Module.HEAPU8.subarray(address, address + nBytes);\n      return result;\n    };\n  })();\n\n  sqlite3.value_bytes = (function() {\n    const fname = 'sqlite3_value_bytes';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(pValue) {\n      const result = f(pValue);\n      return result;\n    };\n  })();\n\n  sqlite3.value_double = (function() {\n    const fname = 'sqlite3_value_double';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(pValue) {\n      const result = f(pValue);\n      return result;\n    };\n  })();\n\n  sqlite3.value_int = (function() {\n    const fname = 'sqlite3_value_int64';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(pValue) {\n      const result = f(pValue);\n      return result;\n    };\n  })();\n\n  sqlite3.value_int64 = (function() {\n    const fname = 'sqlite3_value_int64';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(pValue) {\n      const lo32 = f(pValue);\n      const hi32 = Module.getTempRet0();\n      const result = cvt32x2ToBigInt(lo32, hi32);\n      return result;\n    };\n  })();\n\n  sqlite3.value_text = (function() {\n    const fname = 'sqlite3_value_text';\n    const f = Module.cwrap(fname, ...decl('n:s'));\n    return function(pValue) {\n      const result = f(pValue);\n      return result;\n    };\n  })();\n\n  sqlite3.value_type = (function() {\n    const fname = 'sqlite3_value_type';\n    const f = Module.cwrap(fname, ...decl('n:n'));\n    return function(pValue) {\n      const result = f(pValue);\n      return result;\n    };\n  })();\n\n  sqlite3.vfs_register = function(vfs, makeDefault) {\n    const result = Module.vfs_register(vfs, makeDefault);\n    return check('sqlite3_vfs_register', result);\n  };\n\n  function check(fname, result, db = null, allowed = [SQLite.SQLITE_OK]) {\n    if (allowed.includes(result)) return result;\n    const message = db ? Module.ccall('sqlite3_errmsg', 'string', ['number'], [db]) : fname;\n    throw new SQLiteError(message, result);\n  }\n\n  // This function is used to automatically retry failed calls that\n  // have pending retry operations that should allow the retry to\n  // succeed.\n  async function retry(f) {\n    let rc;\n    do {\n      // Wait for all pending retry operations to complete. This is\n      // normally empty on the first loop iteration.\n      if (Module.retryOps.length) {\n        await Promise.all(Module.retryOps);\n        Module.retryOps = [];\n      }\n      \n      rc = await f();\n\n      // Retry on failure with new pending retry operations.\n    } while (rc && Module.retryOps.length);\n    return rc;\n  }\n\n  return sqlite3;\n}\n\n// Helper function to use a more compact signature specification.\nfunction decl(s) {\n  const result = [];\n  const m = s.match(/([ns@]*):([nsv@])/);\n  switch (m[2]) {\n    case 'n':\n      result.push('number');\n      break;\n    case 's':\n      result.push('string');\n      break;\n    case 'v':\n      result.push(null);\n      break;\n  }\n\n  const args = [];\n  for (let c of m[1]) {\n    switch (c) {\n      case 'n':\n        args.push('number');\n        break;\n      case 's':\n        args.push('string');\n        break;\n    }\n  }\n  result.push(args);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_value, _cancelError = E_CANCELED) {\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._weightedQueues = [];\n        this._weightedWaiters = [];\n    }\n    acquire(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve, reject) => {\n            if (!this._weightedQueues[weight - 1])\n                this._weightedQueues[weight - 1] = [];\n            this._weightedQueues[weight - 1].push({ resolve, reject });\n            this._dispatch();\n        });\n    }\n    runExclusive(callback, weight = 1) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const [value, release] = yield this.acquire(weight);\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve) => {\n            if (!this._weightedWaiters[weight - 1])\n                this._weightedWaiters[weight - 1] = [];\n            this._weightedWaiters[weight - 1].push(resolve);\n            this._dispatch();\n        });\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value) {\n        this._value = value;\n        this._dispatch();\n    }\n    release(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        this._value += weight;\n        this._dispatch();\n    }\n    cancel() {\n        this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));\n        this._weightedQueues = [];\n    }\n    _dispatch() {\n        var _a;\n        for (let weight = this._value; weight > 0; weight--) {\n            const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();\n            if (!queueEntry)\n                continue;\n            const previousValue = this._value;\n            const previousWeight = weight;\n            this._value -= weight;\n            weight = this._value + 1;\n            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);\n        }\n        this._drainUnlockWaiters();\n    }\n    _newReleaser(weight) {\n        let called = false;\n        return () => {\n            if (called)\n                return;\n            called = true;\n            this.release(weight);\n        };\n    }\n    _drainUnlockWaiters() {\n        for (let weight = this._value; weight > 0; weight--) {\n            if (!this._weightedWaiters[weight - 1])\n                continue;\n            this._weightedWaiters[weight - 1].forEach((waiter) => waiter());\n            this._weightedWaiters[weight - 1] = [];\n        }\n    }\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            const [, releaser] = yield this._semaphore.acquire();\n            return releaser;\n        });\n    }\n    runExclusive(callback) {\n        return this._semaphore.runExclusive(() => callback());\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock() {\n        return this._semaphore.waitForUnlock();\n    }\n    release() {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: (weight) => {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let isTimeout = false;\n                const handle = setTimeout(() => {\n                    isTimeout = true;\n                    reject(timeoutError);\n                }, timeout);\n                try {\n                    const ticket = yield sync.acquire(weight);\n                    if (isTimeout) {\n                        const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                        release();\n                    }\n                    else {\n                        clearTimeout(handle);\n                        resolve(ticket);\n                    }\n                }\n                catch (e) {\n                    if (!isTimeout) {\n                        clearTimeout(handle);\n                        reject(e);\n                    }\n                }\n            }));\n        },\n        runExclusive(callback, weight) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire(weight);\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        release(weight) {\n            sync.release(weight);\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: (weight) => {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => {\n                const handle = setTimeout(() => reject(timeoutError), timeout);\n                sync.waitForUnlock(weight).then(() => {\n                    clearTimeout(handle);\n                    resolve();\n                });\n            });\n        },\n        isLocked: () => sync.isLocked(),\n        getValue: () => sync.getValue(),\n        setValue: (value) => sync.setValue(value),\n    };\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import * as SQLite from '@journeyapps/wa-sqlite';\nimport '@journeyapps/wa-sqlite';\nimport * as Comlink from 'comlink';\nimport { Mutex } from 'async-mutex';\nlet nextId = 1;\nexport async function _openDB(dbFileName, options = { useWebWorker: true }) {\n    const { default: moduleFactory } = await import('@journeyapps/wa-sqlite/dist/wa-sqlite-async.mjs');\n    const module = await moduleFactory();\n    const sqlite3 = SQLite.Factory(module);\n    const { IDBBatchAtomicVFS } = await import('@journeyapps/wa-sqlite/src/examples/IDBBatchAtomicVFS.js');\n    const vfs = new IDBBatchAtomicVFS(dbFileName);\n    sqlite3.vfs_register(vfs, true);\n    const db = await sqlite3.open_v2(dbFileName);\n    const statementMutex = new Mutex();\n    /**\n     * Listeners are exclusive to the DB connection.\n     */\n    const listeners = new Map();\n    let updatedTables = new Set();\n    let updateTimer = null;\n    function fireUpdates() {\n        updateTimer = null;\n        const event = { tables: [...updatedTables], groupedUpdates: {}, rawUpdates: [] };\n        updatedTables.clear();\n        Array.from(listeners.values()).forEach((l) => l(event));\n    }\n    sqlite3.register_table_onchange_hook(db, (opType, tableName, rowId) => {\n        updatedTables.add(tableName);\n        if (updateTimer == null) {\n            updateTimer = setTimeout(fireUpdates, 0);\n        }\n    });\n    /**\n     * This executes single SQL statements inside a requested lock.\n     */\n    const execute = async (sql, bindings) => {\n        // Running multiple statements on the same connection concurrently should not be allowed\n        return _acquireExecuteLock(async () => {\n            return executeSingleStatement(sql, bindings);\n        });\n    };\n    /**\n     * This requests a lock for executing statements.\n     * Should only be used internally.\n     */\n    const _acquireExecuteLock = (callback) => {\n        return statementMutex.runExclusive(callback);\n    };\n    /**\n     * This executes a single statement using SQLite3.\n     */\n    const executeSingleStatement = async (sql, bindings) => {\n        const results = [];\n        for await (const stmt of sqlite3.statements(db, sql)) {\n            let columns;\n            const wrappedBindings = bindings ? [bindings] : [[]];\n            for (const binding of wrappedBindings) {\n                // TODO not sure why this is needed currently, but booleans break\n                binding.forEach((b, index, arr) => {\n                    if (typeof b == 'boolean') {\n                        arr[index] = b ? 1 : 0;\n                    }\n                });\n                sqlite3.reset(stmt);\n                if (bindings) {\n                    sqlite3.bind_collection(stmt, binding);\n                }\n                const rows = [];\n                while ((await sqlite3.step(stmt)) === SQLite.SQLITE_ROW) {\n                    const row = sqlite3.row(stmt);\n                    rows.push(row);\n                }\n                columns = columns ?? sqlite3.column_names(stmt);\n                if (columns.length) {\n                    results.push({ columns, rows });\n                }\n            }\n            // When binding parameters, only a single statement is executed.\n            if (bindings) {\n                break;\n            }\n        }\n        const rows = [];\n        for (const resultset of results) {\n            for (const row of resultset.rows) {\n                const outRow = {};\n                resultset.columns.forEach((key, index) => {\n                    outRow[key] = row[index];\n                });\n                rows.push(outRow);\n            }\n        }\n        const result = {\n            insertId: sqlite3.last_insert_id(db),\n            rowsAffected: sqlite3.changes(db),\n            rows: {\n                _array: rows,\n                length: rows.length\n            }\n        };\n        return result;\n    };\n    /**\n     * This executes SQL statements in a batch.\n     */\n    const executeBatch = async (sql, bindings) => {\n        return _acquireExecuteLock(async () => {\n            let affectedRows = 0;\n            const str = sqlite3.str_new(db, sql);\n            const query = sqlite3.str_value(str);\n            try {\n                await executeSingleStatement('BEGIN TRANSACTION');\n                //Prepare statement once\n                const prepared = await sqlite3.prepare_v2(db, query);\n                if (prepared === null) {\n                    return {\n                        rowsAffected: 0,\n                        rows: { _array: [], length: 0 }\n                    };\n                }\n                const wrappedBindings = bindings ? bindings : [];\n                for (const binding of wrappedBindings) {\n                    // TODO not sure why this is needed currently, but booleans break\n                    for (let i = 0; i < binding.length; i++) {\n                        const b = binding[i];\n                        if (typeof b == 'boolean') {\n                            binding[i] = b ? 1 : 0;\n                        }\n                    }\n                    //Reset bindings\n                    sqlite3.reset(prepared.stmt);\n                    if (bindings) {\n                        sqlite3.bind_collection(prepared.stmt, binding);\n                    }\n                    const result = await sqlite3.step(prepared.stmt);\n                    if (result === SQLite.SQLITE_DONE) {\n                        //The value returned by sqlite3_changes() immediately after an INSERT, UPDATE or DELETE statement run on a view is always zero.\n                        affectedRows += sqlite3.changes(db);\n                    }\n                }\n                //Finalize prepared statement\n                await sqlite3.finalize(prepared.stmt);\n                await executeSingleStatement('COMMIT');\n            }\n            catch (err) {\n                await executeSingleStatement('ROLLBACK');\n                return {\n                    rowsAffected: 0,\n                    rows: { _array: [], length: 0 }\n                };\n            }\n            finally {\n                sqlite3.str_finish(str);\n            }\n            const result = {\n                rowsAffected: affectedRows,\n                rows: { _array: [], length: 0 }\n            };\n            return result;\n        });\n    };\n    if (options.useWebWorker) {\n        const registerOnTableChange = (callback) => {\n            const id = nextId++;\n            listeners.set(id, callback);\n            return Comlink.proxy(() => {\n                listeners.delete(id);\n            });\n        };\n        return {\n            execute: Comlink.proxy(execute),\n            executeBatch: Comlink.proxy(executeBatch),\n            registerOnTableChange: Comlink.proxy(registerOnTableChange),\n            close: Comlink.proxy(() => {\n                sqlite3.close(db);\n            })\n        };\n    }\n    const registerOnTableChange = (callback) => {\n        const id = nextId++;\n        listeners.set(id, callback);\n        return () => {\n            listeners.delete(id);\n        };\n    };\n    return {\n        execute: execute,\n        executeBatch: executeBatch,\n        registerOnTableChange: registerOnTableChange,\n        close: () => sqlite3.close(db)\n    };\n}\n","/**\n * Supports both shared and dedicated workers, based on how the worker is constructed (new SharedWorker vs new Worker()).\n */\nimport '@journeyapps/wa-sqlite';\nimport * as Comlink from 'comlink';\nimport { _openDB } from '../../shared/open-db';\nconst DBMap = new Map();\nconst OPEN_DB_LOCK = 'open-wasqlite-db';\nlet nextClientId = 1;\nconst openDBShared = async (dbFileName) => {\n    // Prevent multiple simultaneous opens from causing race conditions\n    return navigator.locks.request(OPEN_DB_LOCK, async () => {\n        const clientId = nextClientId++;\n        if (!DBMap.has(dbFileName)) {\n            const clientIds = new Set();\n            const connection = await _openDB(dbFileName);\n            DBMap.set(dbFileName, {\n                clientIds,\n                db: connection\n            });\n        }\n        const dbEntry = DBMap.get(dbFileName);\n        dbEntry.clientIds.add(clientId);\n        const { db } = dbEntry;\n        const wrappedConnection = {\n            ...db,\n            close: Comlink.proxy(() => {\n                const { clientIds } = dbEntry;\n                clientIds.delete(clientId);\n                if (clientIds.size == 0) {\n                    console.debug(`Closing connection to ${dbFileName}.`);\n                    DBMap.delete(dbFileName);\n                    return db.close?.();\n                }\n                console.debug(`Connection to ${dbFileName} not closed yet due to active clients.`);\n            })\n        };\n        return Comlink.proxy(wrappedConnection);\n    });\n};\nconst openDBDedicated = async (dbFileName) => {\n    const connection = await _openDB(dbFileName);\n    return Comlink.proxy(connection);\n};\n// Check if we're in a SharedWorker context\nif (typeof SharedWorkerGlobalScope !== 'undefined') {\n    const _self = self;\n    _self.onconnect = function (event) {\n        const port = event.ports[0];\n        console.debug('Exposing shared db on port', port);\n        Comlink.expose(openDBShared, port);\n    };\n    addEventListener('unload', () => {\n        Array.from(DBMap.values()).forEach(async (dbConnection) => {\n            const db = await dbConnection.db;\n            db.close?.();\n        });\n    });\n}\nelse {\n    Comlink.expose(openDBDedicated);\n}\n"],"names":["SQLITE_OK","SQLITE_ERROR","SQLITE_BUSY","SQLITE_IOERR","SQLITE_NOTFOUND","SQLITE_CANTOPEN","SQLITE_IOERR_ACCESS","SQLITE_IOERR_CHECKRESERVEDLOCK","SQLITE_IOERR_CLOSE","SQLITE_IOERR_DELETE","SQLITE_IOERR_FSTAT","SQLITE_IOERR_FSYNC","SQLITE_IOERR_LOCK","SQLITE_IOERR_READ","SQLITE_IOERR_SHORT_READ","SQLITE_IOERR_TRUNCATE","SQLITE_IOERR_UNLOCK","SQLITE_IOERR_WRITE","SQLITE_OPEN_CREATE","SQLITE_OPEN_DELETEONCLOSE","SQLITE_OPEN_URI","SQLITE_OPEN_MAIN_DB","SQLITE_OPEN_TEMP_DB","SQLITE_LOCK_NONE","SQLITE_LOCK_SHARED","SQLITE_LOCK_RESERVED","SQLITE_LOCK_EXCLUSIVE","SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN","SQLITE_IOCAP_BATCH_ATOMIC","SQLITE_FCNTL_PRAGMA","SQLITE_FCNTL_SYNC","SQLITE_FCNTL_BEGIN_ATOMIC_WRITE","SQLITE_FCNTL_COMMIT_ATOMIC_WRITE","SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE","MAX_INT64","MIN_INT64","AsyncFunction","SQLiteError","message","code","async","Factory","Module","sqlite3","sqliteFreeAddress","tmp","tmpPtr","createUTF8","utf8","zts","cvt32x2ToBigInt","lo32","hi32","cvt32x2AsSafe","hiMax","hiMin","databases","verifyDatabase","db","SQLite.SQLITE_MISUSE","mapStmtToDB","verifyStatement","stmt","bindings","isArray","nBindings","i","key","value","SQLite.SQLITE_OK","SQLite.SQLITE_NOTICE","fname","f","decl","byteLength","ptr","result","check","SQLite.SQLITE_RANGE","iCol","type","SQLite.SQLITE_BLOB","SQLite.SQLITE_FLOAT","SQLite.SQLITE_INTEGER","SQLite.SQLITE_NULL","SQLite.SQLITE_TEXT","nBytes","address","columns","nColumns","zFunctionName","nArg","eTextRep","pApp","xFunc","xStep","xFinal","adapt","ctx","n","values","sql","callback","SQLite.SQLITE_ROW","row","id","newVal","zFilename","flags","zVfs","SQLite.SQLITE_OPEN_CREATE","rc","retry","nProgressOps","handler","userData","context","xAuth","cvtArgs","iAction","p3","p4","p5","p6","_","options","prepare","onFinally","maybeFinalize","allocSize","pzHead","pzEnd","pStmt","pzTail","zTail","SQLite.SQLITE_DONE","xCommitHook","xUpdateHook","iUpdateType","dbName","tblName","pValue","vfs","makeDefault","allowed","s","m","args","c","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","obj","port1","port2","expose","port","wrap","throwTransferHandler","serialized","transferHandlers","isAllowedOrigin","allowedOrigins","origin","allowedOrigin","ep","ev","path","argumentList","fromWireValue","returnValue","parent","prop","rawValue","proxy","transfer","wireValue","transferables","toWireValue","closeEndPoint","error","isMessagePort","endpoint","target","pendingListeners","data","resolver","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","proxyFinalizers","newCount","registerProxy","unregisterProxy","isProxyReleased","_target","r","p","_thisArg","rawArgumentList","last","processArguments","myFlat","arr","processed","v","transferCache","transfers","name","serializedValue","msg","resolve","generateUUID","E_CANCELED","__awaiter$2","thisArg","_arguments","P","generator","adopt","reject","fulfilled","step","e","rejected","Semaphore","_value","_cancelError","weight","release","queue","entry","_a","queueEntry","previousValue","previousWeight","called","waiter","__awaiter$1","Mutex","cancelError","releaser","nextId","_openDB","dbFileName","moduleFactory","module","SQLite.Factory","IDBBatchAtomicVFS","statementMutex","listeners","updatedTables","updateTimer","fireUpdates","event","l","opType","tableName","rowId","execute","_acquireExecuteLock","executeSingleStatement","results","wrappedBindings","binding","b","index","rows","resultset","outRow","executeBatch","affectedRows","str","query","prepared","registerOnTableChange","Comlink.proxy","DBMap","OPEN_DB_LOCK","nextClientId","openDBShared","clientId","clientIds","connection","dbEntry","wrappedConnection","openDBDedicated","_self","Comlink.expose","dbConnection"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}